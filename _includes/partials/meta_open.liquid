<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <link rel="apple-touch-icon" sizes="180x180" href="{{ '/' | url }}assets/images/favicons/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ '/' | url }}assets/images/favicons/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="{{ '/' | url }}assets/images/favicons/favicon-16x16.png">
    <link rel="manifest" href="{{ '/' | url }}assets/images/favicons/site.webmanifest">
    <title>
      {% if title %}{{ title }} | {% endif %}Moby Dick; or The Whale, by Herman Melville
    </title>
    <link rel="stylesheet" href="{{ '/' | url }}assets/css/styles.css" />
    <script src="{{ '/' | url }}assets/js/vendor/widowadjust-min.js"></script>
    <script src="{{ '/' | url }}assets/js/vendor/fontfaceobserver.js"></script>

    <script type="text/javascript">
  		(function() {
  			document.documentElement.className += " wf-inactive"; 
  			document.documentElement.className += " swipe"; 
				const cookies = document.cookie.split(';');

				var swipeSetting = false;
				var lightSetting = false;

				for (let i = 0; i < cookies.length; i++) {

					// Check for Swipe UI preference
					if (cookies[i].includes('swipe=on')) {
						// set a cookie to save the setting
						document.cookie = "swipe=on;max-age=31536000;path=/;samesite=strict";
						swipeSetting = true;

					// Check for Light Mode preference
					} else if (cookies[i].includes('lightMode=dark')) {
						// set a cookie to save the setting
						document.cookie = "lightMode=dark;max-age=31536000;path=/;samesite=strict";
						document.documentElement.className += " dark";
						lightSetting = true;
					} else if (cookies[i].includes('lightMode=light')) {
						document.cookie = "lightMode=light;max-age=31536000;path=/;samesite=strict";
						document.documentElement.className += " light";
						lightSetting = true;

					// Check for Font size preference
					} else if (cookies[i].includes('fontSizeModifier')) {
						let fontSizeCookieString = cookies[i];
						// get the value
						let fontSizeModifier = fontSizeCookieString.split('=');
						let fontSizeModifierValue = fontSizeModifier[1];
						console.log(fontSizeModifierValue);
						document.cookie = "fontSizeModifier="+fontSizeModifierValue+";max-age=31536000;path=/;samesite=strict";
						document.documentElement.style.setProperty(`--fontSizeModifier`, fontSizeModifierValue);

					// Check for Line-height preference
					} else if (cookies[i].includes('lineHeightModifier')) {
						let lineHeightCookieString = cookies[i];
						// get the value
						let lineHeightModifier = lineHeightCookieString.split('=');
						let lineHeightModifierValue = lineHeightModifier[1];
						console.log(lineHeightModifierValue);
						document.cookie = "lineHeightModifier="+lineHeightModifierValue+";max-age=31536000;path=/;samesite=strict";
						document.documentElement.style.setProperty(`--lineHeightModifier`, lineHeightModifierValue);

					// Check for word space preference
					} else if (cookies[i].includes('wordSpaceModifier')) {
						let wordSpaceCookieString = cookies[i];
						// get the value
						let wordSpaceModifier = wordSpaceCookieString.split('=');
						let wordSpaceModifierValue = wordSpaceModifier[1];
						console.log(wordSpaceModifierValue);
						document.cookie = "wordSpaceModifier="+wordSpaceModifierValue+";max-age=31536000;path=/;samesite=strict";
						document.documentElement.style.setProperty(`--wordSpaceModifier`, wordSpaceModifierValue);
					}
					
				} // end for
				
				if (swipeSetting == false) {
					document.getElementsByTagName("html")[0].classList.remove('swipe');
				}
				
				if (lightSetting == false) {
					document.cookie = "lightMode=auto;max-age=31536000;path=/;samesite=strict";
				}

        // set initial var for support of variable fonts
        // starting with true since most browsers support them now
        var vfSupport = true;
        
        // Check for browser support of variable fonts
        var vfSupport = "CSS" in window && "supports" in CSS && CSS.supports("(font-variation-settings: normal)");
        // should return true if the browser supports variable fonts
				//console.log('vfSupport: '+vfSupport);
        
  			// Optimization for Repeat Views
  			if( sessionStorage.foutFontsLoaded ) {
  				document.documentElement.classList.remove("wf-inactive");
  				document.documentElement.classList.add("wf-active");
  				return;
  			}
        
        if( vfSupport == true ) { // Check for variable fonts 
					var fontA = new FontFaceObserver('Literata Variable', {
						weight: 400,
						style: 'normal'
					});
					var fontB = new FontFaceObserver('Literata Variable', {
							weight: 400,
							style: 'italic'
						});
			
					Promise.all([fontA.load(), fontB.load()]).then(function () {
            document.documentElement.classList.remove("wf-inactive");
            document.documentElement.classList.add("wf-active");
          
    				// Optimization for Repeat Views
    				sessionStorage.foutFontsLoaded = true;
  				});
        } else { // Else check for static web fonts
					var fontA = new FontFaceObserver('Literata', {
							weight: 'normal',
							style: 'normal'
						});
					var fontB = new FontFaceObserver('Literata', {
							weight: 'normal',
							style: 'italic'
						});
          var fontC = new FontFaceObserver('Literata', {
							weight: 'bold',
							style: 'normal'
						});
					var fontD = new FontFaceObserver('Literata', {
							weight: 'bold',
							style: 'italic'
						});
					var fontE = new FontFaceObserver('Literata', {
							weight: '300',
							style: 'normal'
						});
					var fontF = new FontFaceObserver('Literata', {
							weight: '500',
							style: 'normal'
						});
					var fontG = new FontFaceObserver('Literata', {
							weight: '600',
							style: 'normal'
						});
					var fontH = new FontFaceObserver('Literata Caption', {
							weight: 'normal',
							style: 'normal'
						});
					var fontI = new FontFaceObserver('Literata Deck', {
							weight: '300',
							style: 'normal'
						});
					var fontJ = new FontFaceObserver('Literata Display', {
							weight: '300',
							style: 'normal'
						});
					var fontK = new FontFaceObserver('Literata Display', {
							weight: 'normal',
							style: 'normal'
						});
					var fontL = new FontFaceObserver('Literata Display', {
							weight: '900',
							style: 'normal'
						});

					Promise.all([fontA.load(), fontB.load(), fontC.load(), fontD.load(), fontE.load(), fontF.load(), fontG.load(), fontH.load(), fontI.load(), fontJ.load(), fontK.load(), fontL.load()]).then(function () {
            document.documentElement.classList.remove("wf-inactive");
            document.documentElement.classList.add("wf-active");
          
    				// Optimization for Repeat Views
    				sessionStorage.foutFontsLoaded = true;
    			});
        }
  		})();
  	</script>

  </head>
  <body class="">
    <header id="top" class="top-bar">
      <a href="#main_content" class="visually-hidden">Jump to main <span role="presentation">content</span></a>
      <div>
        <a href="{{ '/' | url }}" class="title-link">{{ metadata.title }}</a>
      </div>
      <div class="link-wrapper">
				<nav class="toc dd-menu">
					<a href="{{ '/' | url }}contents" class="dd-menu-trigger" id="toc_trigger">Contents</a>
					{% include partials/toc.liquid %}
				</nav>
				<div class="settings dd-menu">
					<a href="{{ '/' | url }}settings" class="dd-menu-trigger" id="settings_trigger">Settings</a>
					{% include partials/settings.liquid %}
				</div>
			</div>
    </header>
    <main id="main_content" class="main-content">
